public class Solution {
    
    private int minDistanceRecurrence(String A, String B, int n, int m, int[][] memory)
    {
        if(n == 0)
            return m;  
        
        if(m == 0)
            return n;
            
        if(memory[n-1][m-1] != -1)
        {
             if(A.charAt(n-1) == B.charAt(m-1))
            {
                memory[n-1][m-1] = minDistanceRecurrence(A, B, n-1, m-1, memory);
            }
           else
            {
                memory[n-1][m-1] = 1 + 
                Math.min(Math.min(minDistanceRecurrence(A, B, n-1, m, memory),
                     minDistanceRecurrence(A, B, n, m-1, memory)),
                     minDistanceRecurrence(A, B, n-1, m-1, memory));
            }
            System.out.println("m: "+m +"n: "+ n);
            System.out.println("memory: "+ memory[n-1][m-1]+"char :"+ A.charAt(n-1)+ B.charAt(m-1));
          
        }    

        return memory[n-1][m-1];
    }
    
    public int minDistance(String A, String B) {
        int n = A.length();
        int m = B.length();
        
        int[][] memory = new int[n][m];
        
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
               memory[i][j] = -1; 
            }
        }
        return minDistanceRecurrence(A, B, A.length(), B.length(), memory);
    }
}
